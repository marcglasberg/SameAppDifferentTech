// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library;

import 'dart:convert';

import 'package:celest/celest.dart';
import 'package:celest_backend/exceptions.dart';
import 'package:celest_backend/my_src/models/available_stock.dart';
import 'package:celest_backend/my_src/models/cash_balance.dart';
import 'package:celest_backend/my_src/models/portfolio.dart';
import 'package:celest_backend/my_src/models/stock.dart';
import 'package:celest_core/src/exception/cloud_exception.dart';
import 'package:fast_immutable_collections/src/ilist/ilist.dart';

import '../../client.dart';

class CelestFunctions {
  final admin = CelestFunctionsAdmin();

  final database = CelestFunctionsDatabase();

  final portfolio = CelestFunctionsPortfolio();

  final stocks = CelestFunctionsStocks();
}

class CelestFunctionsAdmin {
  Future<void> doSomething() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/admin/do-something'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return;
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'CloudUserException':
        throw Serializers.instance.deserialize<CloudUserException>($details);
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  Future<void> setDatabase(
    Portfolio portfolio,
    Iterable<AvailableStock> availableStocks,
  ) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/admin/set-database'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: jsonEncode({
        r'portfolio': Serializers.instance.serialize<Portfolio>(portfolio),
        r'availableStocks': availableStocks
            .map((el) => Serializers.instance.serialize<AvailableStock>(el))
            .toList(),
      }),
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return;
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }
}

class CelestFunctionsDatabase {
  /// I'm using the init function to simulate the database initialization.
  /// In reality this would be an admin service that connects to a third-party stock price provider.
  Future<void> init() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/database/init'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return;
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }
}

class CelestFunctionsPortfolio {
  Future<CashBalance> addCashBalance(double howMuch) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/portfolio/add-cash-balance'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: jsonEncode({r'howMuch': howMuch}),
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance.deserialize<CashBalance>($body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  Future<CashBalance> removeCashBalance(double howMuch) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/portfolio/remove-cash-balance'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: jsonEncode({r'howMuch': howMuch}),
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance.deserialize<CashBalance>($body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  Future<CashBalance> readCashBalance() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/portfolio/read-cash-balance'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance.deserialize<CashBalance>($body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  /// Buys the given [availableStock] and return the [Stock] bought.
  /// This may thrown the same [CloudUserException] thrown by [Portfolio].
  ///
  Future<({CashBalance cashBalance, Stock stock})> buyStock(
    AvailableStock availableStock, {
    required int howMany,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/portfolio/buy-stock'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: jsonEncode({
        r'availableStock':
            Serializers.instance.serialize<AvailableStock>(availableStock),
        r'howMany': howMany,
      }),
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance
          .deserialize<({CashBalance cashBalance, Stock stock})>(
              $body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  /// Sells the given [availableStock] and return the [Stock] bought.
  /// /// Returns a Stock with `howManyShares` zero and `averagePrice` zero if all the stock was sold.
  ///
  /// This may thrown the same [CloudUserException] thrown by [Portfolio].
  ///
  Future<({CashBalance cashBalance, Stock stock})> sellStock(
    AvailableStock availableStock, {
    required int howMany,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/portfolio/sell-stock'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
      body: jsonEncode({
        r'availableStock':
            Serializers.instance.serialize<AvailableStock>(availableStock),
        r'howMany': howMany,
      }),
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance
          .deserialize<({CashBalance cashBalance, Stock stock})>(
              $body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }
}

class CelestFunctionsStocks {
  Future<IList<AvailableStock>> readAvailableStocks() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/stocks/read-available-stocks'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance
          .deserialize<IList<AvailableStock>>($body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }

  /// This function selects a random ticker, updates its price (with some random variation)
  /// and returns the updated ticker/price pair.
  ///
  /// For the moment, Celest has no features to read directly from a database with a websocket,
  /// so I've created this functions to help me simulate this. As soon as Celest has websockets to
  /// the database I'm going to remove this function and replace it with the real thing.
  ///
  /// Note I'll also have to simulate the websocket client in the frontend code, to use
  /// this function and convert it to a stream of values.
  ///
  Future<({double price, String ticker})?> readUpdatedStockPrice() async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/stocks/read-updated-stock-price'),
      headers: const {'Content-Type': 'application/json; charset=utf-8'},
    );
    final $body = (jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode == 200) {
      return Serializers.instance
          .deserialize<({double price, String ticker})?>($body['response']);
    }
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'InternalServerException':
        throw Serializers.instance
            .deserialize<InternalServerException>($details);
      case _:
        switch ($response.statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerException($code);
        }
    }
  }
}
